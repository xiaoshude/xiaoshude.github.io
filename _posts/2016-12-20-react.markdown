---
layout: post
title:  "写给大家看的React"
author: "fjywan"
header-img: "img/post-bg-02.jpg"
date:   2016-12-20 18:10:00 +0800
---

写这篇文章时，想像着，面前坐着的是从没听过React的，我要避免为了省劲使用概念。<br/>
概念是个好东西，不过在你理解之前，却可能让你看不清背后发生了啥<br/>
之所以拿React来说，仅仅因为最近在看。也是对现在的理解拍个照片，记录下来

带上些许对生活现象的观察就可以出发了

### 她需要一个怎样的菜单
和敏宝儿浏览一个网页，<br/>
「这个菜单有点问题，内容出现好大一段距离了，对应的导航栏才变红」，我说<br/>
「还真是」，她也注意到了<br/>
「计算上这个偏移量，就能在鼠标正好滚动到内容出现时高亮那个菜单了」<br/>
「这难道不是电脑自己就会做的吗？」<br/>
「嗯... 你感觉，一个菜单应该怎么弄？」<br/>
「这不是有标题吗？告诉电脑我这要个菜单就好了」<br/> 

告诉这有个菜单，它应该自己知道，网页上有哪些标题，当内容出现时，把对应标题高亮。

比如写个类似这样的东西<menu />，就会出来一个菜单

对使用者来说，一个功能，需要告诉它怎么做的东西越少，越好用，最好它自己能figure out使用者的意图

对制作这个菜单来说呢？

### 表达什么的时候你会觉到困难
你刚看完一个电影，很感动，好想去发朋友圈，却发觉很难叙述出来，让别人体验类似的感动<br/>
这份感动的全部意义根植于它所处的情景，和那部电影、当时的心情，千丝万缕、深深嵌在一起，拿不出来

表达感觉时会比较困难，因为情景相关

同样的想把那个菜单拿出来到处使用也比较困难<br/>
因为它和具体的网页相关，如果放在一个没有标题的网页上，很难确定还能正常工作

### 未被告诉的信息

你对旅游规划很有一套办法，由出发地、目的地总能规划出一条路线、时间表，覆盖所有好玩好吃地方，还有需要带的物品清单，十分贴心<br/>
想象你在窗前，放着纸笔。<br/>
好朋友苏州到厦门玩，委托你做行程规划。<br/>
抬头扶眼镜间隙，瞥见窗外厚厚的云层，「带把伞」，你在物品清单最后写了条<br/>
很好，不过仅仅是因为你恰巧知道朋友下午出发。 <br/>
下次不知道呢?<br/>
你的规划并不总是可靠。<br/>
环境条件变化时，怎么做会变得很随意，不可预测<br/>

什么导致你的行程规划不总是可靠呢？<br/>
出发时间这一很重要的信息，你依赖它来做行程规划，却并没有在规划前，作为必须项询问每个找你规划的人。<br/>
环境不具备让你知道啥时候出发，就很难知道你做的规划还可靠<br/>

不要使用未被告诉的信息，如果确实需要某些信息，应该让它被明确告诉。

怎样让菜单换个地方也好用呢？<br/>
<menu input=“titles" />, <br/>
让需要的标题被明确告诉<br/>

### 纸

假想你买了一台这样的造纸机，声称塞进去木头就出来纸。<br/>
你发现，塞进木头后，造不造纸还看天气，阴天不造；<br/>
造纸的时候吐出来的不仅是纸，而且在里面还给包装了，<br/>
也许你会高兴一阵，但不会持续到下一个要散卖的订单<br/>

这样的造纸机不是好造纸机：看天气；<br/>
这样的造纸机也不是好造纸机：只要纸，却直接给包装了<br/>

input -> O -> output <br/>
下面两条会让O到处好使：<br/>
O 不使用未被告诉的信息；<br/>
不自己改变外面的东西

### 当你看雨水顺着车窗流下时，你看到了什么

潦草的图案，像节节草，<br/>
不由自主去摸摸，湿湿凉凉，感觉能触碰到玻璃对面

或者歪着头，瞅水纹的倾斜，仿佛能看到滚动的车轮，变动的车速表，<br/>
咕喃着现在的车速约莫80km/h

从刚开始写代码到现在有一个让我印象深刻的转变

以前打开网页，看到的是这有个图片轮播，鼠标悬浮在上面时要暂停播放，那有个按钮，要响应用户点击，把这个衣服加到购物车...<br/>
现在呢，是这些展示下面的数据，和数据的流动。从数据库流过来，沿途汇集支流，支撑起眼前的东西<br/>
页面是数据的映射，操作导致数据的改变，而不是直接改变页面，然后数据驱动页面更新<br/>

结冰的河面上，这些不断加厚的冰面来自底下流动的河水

回想一下使用过的任何一款记录待办事项的app，<br/>
当你输入一个待办按下回车时，你会这样想：哇，下面记录待办事项的数据多了一条，bang，页面显示多了一行

### React

到这里才写到主题，却马上就要结束了（旅程快结束了）。不过你会发现，要说的这个东西，并没有超出你一直来关于「一个东西怎样做好使」的理解。

从数据到你看到的页面，还有一段路，React用来帮你更便捷的走完这段距离。

```
React提供的便利：
数据到页面，有个友好且强大的模板引擎，
一致的JavaScript语法，完全的JS expression(想想Angular 里)，
并要求以便于复用的方式来写

维护多个数据源的弊端：多个数据集的同步会把你逼疯。
当因为使用的数据格式不同时，
不要试图维护并同步几个不同格式的数据源。
维持一个数据源，做几个数据转换器，需要哪种格式，用哪个转换器
```

文章断断续续写于路上，<br/>
单曲循环着一首《黑夜就是从很远的地方跑回来》，<br/>
如果听的不是这首歌会不会写成另个模样，看，写这文章也是情景相关的，再难复制。<br/>

祝「每一天都会奔跑的更远」


