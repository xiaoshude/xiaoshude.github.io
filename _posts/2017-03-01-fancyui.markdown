---
layout: post
title: fancyui组件设计思路
author: "fjywan"
header-img: "img/post-bg-02.jpg"
date:   2017-03-01
---

### 项目背景

公司内部有大量中后台项目，从会员管理到营销支付等，每个项目虽然功能不同，但却存在大量相似的UI、交互和对数据处理方式。怎样在团队间共享这部分代码加快开发效率呢？

首先UI上，当时还没有一个好用的Angular UI库能涵盖所有的业务场景。
其次，我们需要的不仅是一个UI库，而是一个中后台开发的全能武器库。


### 开发思路

1. 提炼功能性组件，例如树形菜单就被提炼为一个Menu组件，只要传入菜单数据，简单配置即可生成一个可交互的树形菜单。

2. 提炼容器性组件，例如头部导航组件Nav，主要是传入数据然后展开为一段有样式的HTML，用于节省HTML和CSS的书写

3. 提炼服务性组件，例如全局消息通知Message, 更像一个工具，按需注入使用

4. 抽象页面化组件，这是缩短开发时间的大杀器，例如整个列表页抽象为组件omnitable，传入一个配置对象，即可生成一个完整可交互的列表页

### 关于页面化组件
功能组件，比如常见的菜单、面包屑等，比较常见。这里主要介绍页面化组件。所谓页面化组件是指：通过某种自定义后直接生成整个页面的组件

当一个组件复杂到是一个页面的时候，它的配置就要灵活到能对组件运行的整个生命周期进行控制。从组件创建、销毁 到 每个交互的节点支持插入自定义逻辑。[omnitable](http://www.fancyui.org/#/zh-cn/component/omnitable) 就是这样一个组件。

它会生成一个带查询功能的列表页。使用时传入一个配置对象，配置对象里包含对怎样展示的定义、每个关键节点的回调函数。

整个页面的开发由原来的写 view、css、controller变成了直接写配置，大大节省了开发时间。

### 和其他组件库的区别
针对中后台开发。
第一个试图提炼中后台常见情景并抽象为情景模版的组件库（注：指16年中。现在ant design也推出了中后台情景模版）







